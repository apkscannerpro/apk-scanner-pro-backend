import openai
import os
import smtplib
import textwrap
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from io import BytesIO
from flask import Flask, request, jsonify
from werkzeug.utils import secure_filename
import tempfile
import json

# Import scan functions
from . import scan_worker

# Load OpenAI key
openai.api_key = os.getenv("OPENAI_API_KEY")

# === Bitdefender affiliate link ===
BITDEFENDER_AFFILIATE_LINK = scan_worker.BITDEFENDER_AFFILIATE_LINK

# === Branding constants ===
COMPANY_NAME = "APK Scanner Pro"
COMPANY_URL = "https://apkscannerpro.com"
COMPANY_SUPPORT_EMAIL = "support@apkscannerpro.com"


# === Generate full human-readable report ===
def generate_report(scan_result: dict) -> str:
    threat_data = str(scan_result)
    prompt = f"""
You are a cybersecurity assistant for {COMPANY_NAME}.
Convert this VirusTotal + AI scan result into a clear, professional,
human-readable malware risk report.

Focus on:
- Risks & Detections
- Security Impact
- Recommendations
- Final Verdict

Scan data:
{threat_data}
"""
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"‚ùå OpenAI report generation failed: {e}")
        return "Report generation failed. Raw scan data:\n" + threat_data


# === Generate short AI summary ===
def generate_summary(scan_result: dict) -> str:
    threat_data = str(scan_result)
    prompt = f"""
You are a cybersecurity assistant for {COMPANY_NAME}.
Summarize the scan result in 3-4 lines:
- Is the APK safe or malicious?
- Risk level (Low/Medium/High)
- One clear recommendation

Scan data:
{threat_data}
"""
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"‚ùå OpenAI summary generation failed: {e}")
        return "Summary unavailable."


# === Generate PDF report ===
def generate_pdf_report(summary: str, report_text: str, file_name: str = "APK File", scan_result: dict = None) -> BytesIO:
    buffer = BytesIO()
    pdf = canvas.Canvas(buffer, pagesize=letter)
    pdf.setFont("Helvetica", 11)

    y = 770
    pdf.setFont("Helvetica-Bold", 14)
    pdf.drawString(50, y, f"{COMPANY_NAME} - Security Report")
    y -= 25

    pdf.setFont("Helvetica", 10)
    pdf.drawString(50, y, f"Scan Date: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}")
    y -= 15
    pdf.drawString(50, y, f"File: {file_name}")
    y -= 15
    if scan_result and "verdict" in scan_result:
        pdf.drawString(50, y, f"Final Verdict: {scan_result['verdict']}")
        y -= 25

    # Summary
    pdf.setFont("Helvetica-Bold", 11)
    pdf.drawString(50, y, "Summary:")
    y -= 15
    pdf.setFont("Helvetica", 11)
    for line in summary.split("\n"):
        for wrap_line in textwrap.wrap(line, width=90):
            if y < 50:
                pdf.showPage()
                pdf.setFont("Helvetica", 11)
                y = 770
            pdf.drawString(50, y, wrap_line)
            y -= 15

    # Detailed report
    y -= 20
    pdf.setFont("Helvetica-Bold", 11)
    pdf.drawString(50, y, "Detailed Report:")
    y -= 15
    pdf.setFont("Helvetica", 11)
    for line in report_text.split("\n"):
        for wrap_line in textwrap.wrap(line, width=90):
            if y < 50:
                pdf.showPage()
                pdf.setFont("Helvetica", 11)
                y = 770
            pdf.drawString(50, y, wrap_line)
            y -= 15

    # Affiliate footer
    y -= 30
    pdf.setFont("Helvetica-Bold", 11)
    pdf.drawString(50, y, "Protect Your Device:")
    y -= 15
    pdf.setFont("Helvetica-Oblique", 10)
    pdf.drawString(50, y, f"Upgrade your security with Bitdefender üëâ {BITDEFENDER_AFFILIATE_LINK}")

    y -= 30
    pdf.setFont("Helvetica", 9)
    pdf.drawString(50, y, f"Report generated by {COMPANY_NAME} | {COMPANY_URL}")

    pdf.save()
    buffer.seek(0)
    return buffer


# === Append email into subscribers.json ===
def add_to_subscribers(email: str, name: str = ""):
    try:
        subs_file = os.path.join(os.path.dirname(__file__), "Subscribers", "subscribers.json")
        os.makedirs(os.path.dirname(subs_file), exist_ok=True)

        data = []
        if os.path.exists(subs_file):
            try:
                with open(subs_file, "r") as f:
                    data = json.load(f)
            except Exception:
                data = []

        if not any(sub.get("email") == email for sub in data):
            data.append({"name": name, "email": email})
            with open(subs_file, "w") as f:
                json.dump(data, f, indent=2)
            print(f"üì© Added {email} to subscribers.json")
    except Exception as e:
        print(f"‚ùå Failed to update subscribers.json: {e}")


# === Send report via email (Plain Text + PDF) ===
def send_report_via_email(to_email: str, scan_result: dict, file_name: str = "APK File") -> bool:
    summary = generate_summary(scan_result)
    report_text = generate_report(scan_result)
    pdf_buffer = generate_pdf_report(summary, report_text, file_name, scan_result)

    sender_email = os.getenv("EMAIL_USER")
    sender_pass = os.getenv("EMAIL_PASS")
    smtp_server = os.getenv("SMTP_SERVER", "smtpout.secureserver.net")
    smtp_port = int(os.getenv("SMTP_PORT", 587))

    msg = MIMEMultipart()
    msg["From"] = f"{COMPANY_NAME} <{sender_email}>"
    msg["To"] = to_email
    msg["Subject"] = f"{COMPANY_NAME} - Security Report for {file_name}"

    # === Branded Plain Text Email Body ===
    verdict = scan_result.get("verdict", "Unknown")
    vt_stats = scan_result.get("virustotal", {})
    ai_summary = scan_result.get("ai", {}).get("ai_summary", "")

    plain_body = f"""
{COMPANY_NAME} - Malware Risk Report
====================================

üìÖ Scan Date: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}
üìÇ File: {file_name}
‚úÖ Final Verdict: {verdict}

--- Summary ---
{summary}

--- AI Analysis ---
{ai_summary}

--- VirusTotal Stats ---
Malicious: {vt_stats.get("malicious", 0)}
Suspicious: {vt_stats.get("suspicious", 0)}
Undetected: {vt_stats.get("undetected", 0)}
Harmless: {vt_stats.get("harmless", 0)}

--- Detailed Report ---
{report_text}

--- Recommendation ---
üîí Protect your device with Bitdefender üëâ {BITDEFENDER_AFFILIATE_LINK}

---
Generated by {COMPANY_NAME}
üåê Website: {COMPANY_URL}
üìß Support: {COMPANY_SUPPORT_EMAIL}
"""

    msg.attach(MIMEText(plain_body, "plain"))

    # PDF attachment
    pdf_attachment = MIMEApplication(pdf_buffer.read(), _subtype="pdf")
    pdf_attachment.add_header("Content-Disposition", "attachment", filename="APK_Scan_Report.pdf")
    msg.attach(pdf_attachment)

    try:
        with smtplib.SMTP(smtp_server, smtp_port, timeout=30) as server:
            server.starttls()
            server.login(sender_email, sender_pass)
            server.sendmail(sender_email, to_email, msg.as_string())

        print(f"‚úÖ Report sent successfully to {to_email}")

        # Append email to subscribers.json
        add_to_subscribers(to_email)

        return True
    except Exception as e:
        print(f"‚ùå Failed to send report to {to_email}: {e}")
        return False


# === Flask App Endpoint for testing ===
app = Flask(__name__)

@app.route("/scan", methods=["POST"])
def scan():
    try:
        email = request.form.get("email")
        apk_url = request.form.get("apk_url")
        file = request.files.get("apk")

        if not email:
            return jsonify({"error": "Email is required"}), 400

        # Handle file upload
        if file:
            filename = secure_filename(file.filename)
            with tempfile.NamedTemporaryFile(delete=False, suffix=".apk") as tmp:
                file.save(tmp.name)
                result = scan_worker.scan_apk(tmp.name)
            os.unlink(tmp.name)
            file_name = filename

        # Handle URL scan
        elif apk_url:
            result = scan_worker.scan_url(apk_url)
            file_name = apk_url

        else:
            return jsonify({"error": "No APK file or URL provided"}), 400

        # Send email report
        send_report_via_email(email, result, file_name)

        return jsonify({"status": "success", "result": result})

    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
